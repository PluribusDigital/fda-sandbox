machine:
  python:
    version: 3.4.2
  services:
    - docker

dependencies:
  pre:
    # install aws command line tools for elasticbean stalk deployment
    - pip install awscli
    # nodejs-legacy fails, why do we need this?
    # - sudo apt-get install nodejs-legacy
    # python setup
    - cd gruve && python setup.py develop

  post:
    - bundle exec rake bower:install
    - docker info
    # build web image
    - docker build -t stsilabs/openfda-web:$CIRCLE_SHA1 .
    # run docker containers
    - docker run --name openfda-postgres -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -d postgres:9.4
    - docker run --link openfda-postgres:postgres -p 80:80 -e "RAILS_ENV=demo" --name openfda-web stsilabs/openfda-web:$CIRCLE_SHA1 bundle exec rake db:setup:
      timeout: 1200
    #build postgres image   
    - if [ "$BUILD_POSTGRES_IMAGE" = "true"  ]; then docker commit postgres stsilabs/openfda-postgres; fi

# skipping seed temporarily
#database:
#  post:
#    - bundle exec rake db:seed:
#        environment:
#          RAILS_ENV: test
#          RACK_ENV: test

test:
  override:
    - echo "skipping tests temporarily"
    #- bundle exec rspec:
    #    environment:
    #      RAILS_ENV: test
    #      RACK_ENV: test

deployment:
#  demo:
#    branch: master
#    commands:
#      - bundle exec cap demo deploy
  elasticbeanstalk:
    branch: master
    commands:
    - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASSWORD
    - bash docker_deploy.sh $CIRCLE_SHA1 $POSTGRES_USER $POSTGRES_PASSWORD

teardown:
  pre:
    - docker stop openfda-postgres
    - docker rm openfda-postgres
    - docker rm openfda-web